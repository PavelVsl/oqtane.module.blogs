@using Oqtane.Module.Blogs.Models
@using Oqtane.Module.Blogs.Services
@namespace Oqtane.Module.Blogs
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject HttpClient http
@inject SiteState sitestate

<table class="table table-borderless">
    <tr>
        <td>
            <Label For="title" HelpText="Enter the title of your blog">Title: </Label>
        </td>
        <td>
            <input id="title" type="text" class="form-control" @bind="@_title" />
        </td>
    </tr>
    <tr>
        <td>
            <Label For="content" HelpText="Enter the content of your blog">Blog: </Label>
        </td>
        <td>
            <textarea id="content" class="form-control" @bind="@_content" cols="40" rows="5"></textarea>
        </td>
    </tr>
</table>
<button type="button" class="btn btn-success" @onclick="@SaveBlog">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />
<AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>

@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Edit; } }
    public override string Actions { get { return "Add,Edit"; } }

    private int _id = -1;
    private string _title;
    private string _content;
    private string _createdby;
    private DateTime _createdon;
    private string _modifiedby;
    private DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.QueryString.ContainsKey("id"))
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                BlogService BlogService = new BlogService(http, sitestate, NavigationManager);
                Blog blog = await BlogService.GetBlogAsync(_id, ModuleState.ModuleId);
                if (blog != null)
                {
                    _title = blog.Title;
                    _content = blog.Content;
                    _createdby = blog.CreatedBy;
                    _createdon = blog.CreatedOn;
                    _modifiedby = blog.ModifiedBy;
                    _modifiedon = blog.ModifiedOn;
                }
                else
                {
                    await logger.LogError("Error Loading Blog {BlogId} {Error}", _id);
                    ModuleInstance.AddModuleMessage("Error Loading Blog", MessageType.Error);
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Blog {BlogId} {Error}", _id, ex.Message);
            ModuleInstance.AddModuleMessage("Error Loading Blog", MessageType.Error);
        }
    }

    private async Task SaveBlog()
    {
        try
        {
            BlogService BlogService = new BlogService(http, sitestate, NavigationManager);
            if (_id == -1)
            {
                Blog blog = new Blog();
                blog.ModuleId = ModuleState.ModuleId;
                blog.Title = _title;
                blog.Content = _content;
                await BlogService.AddBlogAsync(blog);
                await logger.LogInformation("Blog Added {Blog}", blog);
                NavigationManager.NavigateTo(NavigateUrl());
            }
            else
            {
                Blog blog = await BlogService.GetBlogAsync(_id, ModuleState.ModuleId);
                if (blog != null)
                {
                    blog.Title = _title;
                    blog.Content = _content;
                    await BlogService.UpdateBlogAsync(blog);
                    await logger.LogInformation("Blog Updated {Blog}", blog);
                    NavigationManager.NavigateTo(NavigateUrl());
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Blog {BlogId} {Error}", _id, ex.Message);
            ModuleInstance.AddModuleMessage("Error Saving Blog", MessageType.Error);
        }
    }
}

@using Oqtane.Module.Blogs.Models
@using Oqtane.Module.Blogs.Services
@namespace Oqtane.Module.Blogs
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject HttpClient http
@inject SiteState sitestate

<table class="form-group">
    <tr>
        <td>
            <label for="Title" class="control-label">Title: </label>
        </td>
        <td>
            <input type="text" class="form-control" @bind="@title" />
        </td>
    </tr>
    <tr>
        <td>
            <label for="Blog" class="control-label">Blog: </label>
        </td>
        <td>
            <textarea class="form-control" @bind="@content" cols="40" rows="5"></textarea>
        </td>
    </tr>
</table>
<button type="button" class="btn btn-success" @onclick="@SaveBlog">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />
<AuditInfo CreatedBy="@createdby" CreatedOn="@createdon" ModifiedBy="@modifiedby" ModifiedOn="@modifiedon"></AuditInfo>

@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Edit; } }

    int id;
    string title;
    string content;
    string createdby;
    DateTime createdon;
    string modifiedby;
    DateTime modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            id = Int32.Parse(PageState.QueryString["id"]);
            BlogService BlogService = new BlogService(http, sitestate, NavigationManager);
            Blog blog = await BlogService.GetBlogAsync(id, ModuleState.ModuleId);
            if (blog != null)
            {
                title = blog.Title;
                content = blog.Content;
                createdby = blog.CreatedBy;
                createdon = blog.CreatedOn;
                modifiedby = blog.ModifiedBy;
                modifiedon = blog.ModifiedOn;
            }
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    private async Task SaveBlog()
    {
        try
        {
            BlogService BlogService = new BlogService(http, sitestate, NavigationManager);
            Blog blog = await BlogService.GetBlogAsync(id, ModuleState.ModuleId);
            if (blog != null)
            {
                blog.Title = title;
                blog.Content = content;
                await BlogService.UpdateBlogAsync(blog);
            }
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }
}
